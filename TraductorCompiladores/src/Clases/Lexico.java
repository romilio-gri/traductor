/*  */

package Clases;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import Tablas.TablaErrores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/05/22 01:20 AM from the specification file
 * <tt>D:/Romilio/Universidad/7mo Semestre/Compiladores/Proyecto/Traductor/src/Lexico/Lex.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\56\2\0\1\55\22\0\1\34\1\46\5\0\1\35"+
    "\1\47\1\50\1\53\1\0\1\40\1\33\1\37\1\54\12\0\1\42"+
    "\1\41\3\0\1\44\1\0\1\1\1\17\1\2\1\22\1\10\1\27"+
    "\1\7\1\24\1\4\1\30\1\21\1\13\1\12\1\6\1\5\1\16"+
    "\1\31\1\11\1\14\1\3\1\25\1\26\1\15\1\23\1\20\1\32"+
    "\1\51\1\0\1\52\3\0\1\1\1\17\1\2\1\22\1\10\1\27"+
    "\1\7\1\24\1\4\1\30\1\21\1\13\1\12\1\6\1\5\1\16"+
    "\1\31\1\11\1\14\1\3\1\25\1\26\1\15\1\23\1\20\1\32"+
    "\46\0\1\45\35\0\1\43\u1f59\0\1\36\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\25\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\0\1\24"+
    "\1\0\1\2\4\0\1\24\20\0\1\24\6\0\1\3"+
    "\1\24\4\0\1\25\4\0\1\24\1\26\4\0\1\24"+
    "\2\0\1\27\4\0\1\30\27\0\1\31\11\0\1\32"+
    "\16\0\1\3\13\0\1\30\2\0\1\24\1\0\1\26"+
    "\7\0\1\30\6\0\1\3\3\0\1\24\17\0\1\5"+
    "\1\0\1\30\3\0\1\33\1\34\5\0\1\35\1\36"+
    "\11\0\1\35\3\0\1\30\11\0\1\30\4\0\1\34"+
    "\47\0\1\37\5\0\1\37\4\0\1\40\2\0\1\41"+
    "\6\0\1\42\12\0\1\43\5\0\1\37\21\0\1\27"+
    "\1\0\1\44\1\45\12\0\1\33\12\0\1\30\1\34"+
    "\21\0\1\33\15\0\1\46\4\0\1\34\24\0\1\41"+
    "\22\0\1\37\6\0\1\34\2\0\1\30\21\0\1\3"+
    "\1\34\5\0\1\33\1\0\1\30\1\0\1\33\1\0"+
    "\1\47\12\0\1\50\7\0\1\24\11\0\1\51\1\33"+
    "\6\0\1\30\15\0\1\24\2\0\1\3\32\0\1\34"+
    "\5\0\1\31\1\33\2\0\1\51\2\0\1\31\11\0"+
    "\1\24\4\0\1\52\10\0\1\24\4\0\1\35\74\0"+
    "\1\46\2\0\1\30\1\0\1\34\12\0\1\30\15\0"+
    "\1\53\1\24\1\0\1\53\3\0\1\3\30\0\1\32"+
    "\10\0\1\24\3\0\1\37\4\0\1\24\2\0\1\24"+
    "\51\0\1\30\1\0\1\35\2\0\1\30\1\0\1\34"+
    "\2\0\1\34\5\0\1\35\1\33\3\0\1\33\2\0"+
    "\1\51\4\0\1\30\3\0\1\54\1\0\1\33\4\0"+
    "\1\50\4\0\1\45\2\0\1\34\23\0\1\46\24\0"+
    "\1\52\10\0\1\34\5\0\1\33\12\0\1\37\4\0"+
    "\1\37\27\0\1\24\6\0\1\30\3\0\1\30\4\0"+
    "\1\55\11\0\1\53\1\52\15\0\1\35\31\0\1\45"+
    "\3\0\1\37\16\0\1\24\11\0\1\41\1\0\1\30"+
    "\24\0\1\30\11\0\1\52\45\0\1\24\25\0\1\37"+
    "\10\0\1\30\1\37\3\0\1\56\36\0\1\33\4\0"+
    "\1\36\10\0\1\57\1\56\3\0\1\60\13\0\1\52"+
    "\11\0\1\61\1\60\2\0\1\62\1\63\4\0\1\64"+
    "\1\0\1\62\50\0\1\65\57\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\57\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\57\0\u13d4\0\u1403\0\u1432"+
    "\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\57\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\57"+
    "\0\57\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\57"+
    "\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516"+
    "\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\57\0\u2630\0\u265f"+
    "\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8\0\u27d7"+
    "\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f"+
    "\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7"+
    "\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f"+
    "\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7"+
    "\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f"+
    "\0\u2f5e\0\u2f8d\0\u2fbc\0\u28c2\0\u2feb\0\u301a\0\u3049\0\u3078"+
    "\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0"+
    "\0\u321f\0\u324e\0\57\0\u327d\0\u32ac\0\u32db\0\u330a\0\u3339"+
    "\0\u3368\0\57\0\u3397\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482"+
    "\0\u34b1\0\u34e0\0\u350f\0\u353e\0\57\0\u356d\0\u359c\0\u35cb"+
    "\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743"+
    "\0\u3772\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb"+
    "\0\u21f7\0\u38ea\0\u3919\0\u3948\0\u3977\0\u39a6\0\57\0\57"+
    "\0\u39d5\0\u3a04\0\u3a33\0\u3a62\0\u3a91\0\u3ac0\0\u3aef\0\u3b1e"+
    "\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09\0\u3c38\0\u3c67\0\u3c96"+
    "\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e"+
    "\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28\0\u3f57\0\u3f86"+
    "\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf\0\u40fe"+
    "\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9\0\u4218\0\u4247\0\u4276"+
    "\0\u42a5\0\u42d4\0\u4303\0\u4332\0\u4361\0\u4390\0\u43bf\0\u43ee"+
    "\0\u441d\0\u444c\0\u447b\0\u44aa\0\u44d9\0\u4508\0\u4537\0\u4566"+
    "\0\u4595\0\u45c4\0\u45f3\0\u4622\0\u4651\0\u4680\0\u46af\0\u46de"+
    "\0\u470d\0\u473c\0\u476b\0\u479a\0\u47c9\0\u47f8\0\u4827\0\u4856"+
    "\0\u2b83\0\u4885\0\u48b4\0\u48e3\0\u4912\0\u4941\0\u4970\0\u499f"+
    "\0\u49ce\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8\0\u4b17"+
    "\0\u4b46\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02\0\u4c31\0\u4c60\0\u4c8f"+
    "\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8\0\u4e07"+
    "\0\u4e36\0\u4e65\0\u4e94\0\u4ec3\0\u4ef2\0\u4f21\0\u4f50\0\u4f7f"+
    "\0\u4fae\0\u4fdd\0\u500c\0\u503b\0\u506a\0\u5099\0\u50c8\0\u50f7"+
    "\0\u5126\0\u5155\0\u5184\0\u51b3\0\u51e2\0\u5211\0\u43ee\0\u5240"+
    "\0\u526f\0\u529e\0\u52cd\0\u52fc\0\57\0\u532b\0\u535a\0\u5389"+
    "\0\u53b8\0\u53e7\0\u5416\0\u5445\0\u5474\0\u54a3\0\u54d2\0\u5501"+
    "\0\u5530\0\u555f\0\u558e\0\u55bd\0\u55ec\0\u561b\0\u564a\0\u5679"+
    "\0\u56a8\0\u56d7\0\u5706\0\u5735\0\u5764\0\u5793\0\u57c2\0\u57f1"+
    "\0\u5820\0\57\0\u584f\0\u4d1c\0\u587e\0\u58ad\0\u58dc\0\u590b"+
    "\0\u593a\0\u5969\0\u5998\0\u59c7\0\u59f6\0\u5a25\0\u5a54\0\u5a83"+
    "\0\u5ab2\0\u5ae1\0\u5b10\0\u5b3f\0\u5b6e\0\u5b9d\0\u5bcc\0\u5bfb"+
    "\0\u5c2a\0\u5c59\0\u5c88\0\u5cb7\0\u5ce6\0\u5d15\0\u5d44\0\u5d73"+
    "\0\u5da2\0\u5dd1\0\u5e00\0\u5e2f\0\u5e5e\0\u5e8d\0\u5ebc\0\u5eeb"+
    "\0\u5f1a\0\u5f49\0\u5f78\0\u5fa7\0\u5fd6\0\u6005\0\u6034\0\u6063"+
    "\0\u6092\0\u60c1\0\u60f0\0\u611f\0\u614e\0\u1e7a\0\u617d\0\u61ac"+
    "\0\u61db\0\u620a\0\u6239\0\u6268\0\u418b\0\u6297\0\u62c6\0\u62f5"+
    "\0\u6324\0\u6353\0\u6382\0\u63b1\0\u63e0\0\u640f\0\u643e\0\u646d"+
    "\0\u649c\0\u64cb\0\u64fa\0\u6529\0\57\0\u6558\0\u6587\0\u65b6"+
    "\0\u65e5\0\u6614\0\u6643\0\u6672\0\u66a1\0\u66d0\0\u66ff\0\u672e"+
    "\0\u675d\0\u4bd3\0\u678c\0\u67bb\0\u67ea\0\u6819\0\u6848\0\57"+
    "\0\u6877\0\u68a6\0\u68d5\0\u6904\0\u6933\0\u6962\0\u6991\0\u69c0"+
    "\0\u69ef\0\u6a1e\0\u6a4d\0\u6a7c\0\u6aab\0\u6ada\0\u6b09\0\u6b38"+
    "\0\u6b67\0\u6b96\0\u6bc5\0\u6bf4\0\u6c23\0\u6c52\0\u6c81\0\u6cb0"+
    "\0\u6cdf\0\u6d0e\0\u6d3d\0\u6d6c\0\u6d9b\0\u6dca\0\u6df9\0\u6e28"+
    "\0\u6e57\0\u6e86\0\u6eb5\0\u6ee4\0\u6f13\0\u6f42\0\u6f71\0\u6fa0"+
    "\0\u6fcf\0\u6ffe\0\u702d\0\u705c\0\u708b\0\u70ba\0\u70e9\0\u7118"+
    "\0\u7147\0\u7176\0\u71a5\0\u71d4\0\u7203\0\u7232\0\u7261\0\u7290"+
    "\0\u72bf\0\u72ee\0\u731d\0\u734c\0\57\0\u737b\0\u73aa\0\u73d9"+
    "\0\u7408\0\u7437\0\u7466\0\u7495\0\u74c4\0\u74f3\0\u7522\0\u7551"+
    "\0\u7580\0\u75af\0\u75de\0\u760d\0\u763c\0\u766b\0\u769a\0\u76c9"+
    "\0\u76f8\0\u7727\0\u7756\0\u7785\0\u77b4\0\u77e3\0\u7812\0\u7841"+
    "\0\u7870\0\u789f\0\u78ce\0\u47f8\0\u78fd\0\u792c\0\u795b\0\u798a"+
    "\0\u79b9\0\u79e8\0\u7a17\0\u7a46\0\u7a75\0\u7aa4\0\u7ad3\0\u7b02"+
    "\0\u7b31\0\u7b60\0\u7b8f\0\u7bbe\0\u7bed\0\u7c1c\0\u7c4b\0\u7c7a"+
    "\0\u7ca9\0\u7cd8\0\u7d07\0\u73d9\0\u7d36\0\u7d65\0\u7d94\0\u7dc3"+
    "\0\u7df2\0\u7e21\0\57\0\u7e50\0\u7e7f\0\u7eae\0\u7edd\0\u7f0c"+
    "\0\u7f3b\0\u7f6a\0\u7f99\0\u7fc8\0\u7ff7\0\u8026\0\u8055\0\u8084"+
    "\0\u80b3\0\u80e2\0\u8111\0\u8140\0\u611f\0\u816f\0\u819e\0\u81cd"+
    "\0\u81fc\0\u822b\0\u825a\0\u8289\0\u82b8\0\u82e7\0\u763c\0\u8316"+
    "\0\u8345\0\u8374\0\u83a3\0\u83d2\0\u8401\0\u8430\0\u845f\0\u848e"+
    "\0\u84bd\0\u84ec\0\u851b\0\u854a\0\u8579\0\u85a8\0\u85d7\0\u8606"+
    "\0\u8635\0\u8664\0\u8693\0\u3db0\0\u86c2\0\u86f1\0\u8720\0\u874f"+
    "\0\u877e\0\u87ad\0\u87dc\0\u880b\0\u883a\0\u8869\0\u8898\0\u88c7"+
    "\0\u88f6\0\u092e\0\u8925\0\u8954\0\u8983\0\u89b2\0\u89e1\0\u8a10"+
    "\0\u8a3f\0\u8a6e\0\u8a9d\0\u8acc\0\u8afb\0\u8b2a\0\u8b59\0\u8b88"+
    "\0\u8bb7\0\u8be6\0\u8c15\0\u8c44\0\u8c73\0\u8ca2\0\u49fd\0\u8cd1"+
    "\0\u8d00\0\u8d2f\0\u8d5e\0\u8d8d\0\u8dbc\0\u8deb\0\u8e1a\0\u8e49"+
    "\0\u8e78\0\u8ea7\0\57\0\u8ed6\0\u763c\0\u8f05\0\u8f34\0\u8f63"+
    "\0\u8f92\0\57\0\u8fc1\0\u8ff0\0\u901f\0\u904e\0\u907d\0\u6382"+
    "\0\u90ac\0\u29dc\0\u90db\0\u910a\0\u9139\0\u9168\0\u9197\0\u91c6"+
    "\0\u91f5\0\u9224\0\u9253\0\u9282\0\u92b1\0\u92e0\0\u930f\0\u933e"+
    "\0\u936d\0\u939c\0\u93cb\0\u93fa\0\u9429\0\u9458\0\u9487\0\u94b6"+
    "\0\u94e5\0\u9514\0\u9543\0\u9572\0\u95a1\0\u95d0\0\u95ff\0\u962e"+
    "\0\u965d\0\u968c\0\u96bb\0\u96ea\0\u9719\0\u9748\0\u9777\0\u97a6"+
    "\0\u97d5\0\u9804\0\57\0\u9833\0\u9862\0\u9891\0\u98c0\0\u98ef"+
    "\0\u991e\0\u994d\0\u997c\0\u4e36\0\u99ab\0\u99da\0\u9a09\0\u9a38"+
    "\0\u9a67\0\u2340\0\u9a96\0\u9ac5\0\u9af4\0\u9b23\0\u9b52\0\u9b81"+
    "\0\u9bb0\0\u9bdf\0\u9c0e\0\u9c3d\0\57\0\u9c6c\0\u9c9b\0\u2574"+
    "\0\u9cca\0\u9cf9\0\u9d28\0\u9d57\0\u9d86\0\u9db5\0\u9de4\0\u9e13"+
    "\0\u9e42\0\u9e71\0\u9ea0\0\u9ecf\0\u9efe\0\u9f2d\0\u9f5c\0\u9f8b"+
    "\0\u9fba\0\u9fe9\0\ua018\0\ua047\0\ua076\0\ua0a5\0\ua0d4\0\ua103"+
    "\0\ua132\0\ua161\0\ua190\0\ua1bf\0\ua1ee\0\ua21d\0\ua24c\0\ua27b"+
    "\0\ua2aa\0\ua2aa\0\ua2d9\0\ua308\0\u611f\0\ua337\0\ua366\0\ua395"+
    "\0\ua3c4\0\57\0\ua3f3\0\ua422\0\ua451\0\ua480\0\ua4af\0\ua4de"+
    "\0\ua50d\0\ua53c\0\ua56b\0\57\0\ua59a\0\ua5c9\0\ua5f8\0\ua627"+
    "\0\ua656\0\ua685\0\ua6b4\0\ua6e3\0\ua712\0\ua741\0\ua770\0\ua79f"+
    "\0\ua7ce\0\ua7fd\0\ua82c\0\ua85b\0\ua88a\0\ua8b9\0\ua8e8\0\ua917"+
    "\0\ua946\0\ua975\0\ua9a4\0\ua9d3\0\uaa02\0\uaa31\0\uaa60\0\uaa8f"+
    "\0\uaabe\0\uaaed\0\uab1c\0\uab4b\0\uab7a\0\uaba9\0\uabd8\0\uac07"+
    "\0\uac36\0\uac65\0\uac94\0\uacc3\0\u8111\0\uacf2\0\uad21\0\uad50"+
    "\0\u8bb7\0\uad7f\0\uadae\0\uaddd\0\uae0c\0\uae3b\0\uae6a\0\uae99"+
    "\0\uaec8\0\uaef7\0\uaf26\0\uaf55\0\uaf84\0\uafb3\0\uafe2\0\ub011"+
    "\0\ub040\0\ub06f\0\ub09e\0\ub0cd\0\ub0fc\0\ub12b\0\ub15a\0\ub189"+
    "\0\ub1b8\0\u8a3f\0\ub1e7\0\u4d1c\0\ub216\0\ub245\0\ub274\0\ub2a3"+
    "\0\ub2d2\0\ub301\0\ub330\0\ub35f\0\ub38e\0\ub3bd\0\ub3ec\0\ub41b"+
    "\0\ub44a\0\ub479\0\ub4a8\0\ub4d7\0\ub506\0\ub535\0\ub564\0\ub593"+
    "\0\u503b\0\ub5c2\0\ub5f1\0\ub620\0\ub64f\0\ub67e\0\ub6ad\0\ub6dc"+
    "\0\ub70b\0\ub73a\0\ub769\0\ub798\0\ub7c7\0\ub7f6\0\ub825\0\ub854"+
    "\0\ub883\0\ub8b2\0\ub8e1\0\ub910\0\ub93f\0\ub96e\0\ub99d\0\ub9cc"+
    "\0\ub9fb\0\uba2a\0\uba59\0\uba88\0\ubab7\0\ubae6\0\ubb15\0\ubb44"+
    "\0\ubb73\0\ubba2\0\ubbd1\0\ubc00\0\ubc2f\0\ubc5e\0\ubc8d\0\ubcbc"+
    "\0\ubceb\0\ubd1a\0\ubd49\0\ubd78\0\ubda7\0\ubdd6\0\ube05\0\ube34"+
    "\0\ube63\0\ube92\0\ubec1\0\ubef0\0\ubf1f\0\ubf4e\0\ubf7d\0\ubfac"+
    "\0\ubfdb\0\uc00a\0\uc039\0\ube63\0\uc068\0\uc097\0\uc0c6\0\uc0f5"+
    "\0\uc124\0\uc153\0\uc182\0\uc1b1\0\uc1e0\0\uc20f\0\uc23e\0\uc26d"+
    "\0\uc29c\0\uc2cb\0\uc2fa\0\uc329\0\uc358\0\uc387\0\uc3b6\0\uc3e5"+
    "\0\ua4de\0\uc414\0\uc443\0\uc472\0\57\0\uc4a1\0\uc4d0\0\uc4ff"+
    "\0\uc52e\0\uc55d\0\uc58c\0\uc5bb\0\uc5ea\0\uc619\0\uc648\0\uc677"+
    "\0\uc6a6\0\uc6d5\0\uc704\0\uc733\0\uc762\0\uc791\0\uc7c0\0\uc7ef"+
    "\0\uc81e\0\uc84d\0\uc87c\0\uc8ab\0\uc8da\0\uc909\0\uc938\0\uc967"+
    "\0\uc996\0\uc9c5\0\uc9f4\0\uca23\0\uca52\0\uca81\0\ucab0\0\ucadf"+
    "\0\ubb44\0\ucb0e\0\ucb3d\0\ucb6c\0\ucb9b\0\ucbca\0\ucbf9\0\ucc28"+
    "\0\ucc57\0\57\0\ucc86\0\uccb5\0\ucce4\0\ucd13\0\ube63\0\ucd42"+
    "\0\ucd71\0\ucda0\0\ucdcf\0\ucdfe\0\uce2d\0\uce5c\0\uce8b\0\uceba"+
    "\0\ucee9\0\ucf18\0\ube63\0\ucf47\0\ucf76\0\ucfa5\0\ucfd4\0\ud003"+
    "\0\ud032\0\ud061\0\ud090\0\uca23\0\57\0\57\0\ud0bf\0\ud0ee"+
    "\0\57\0\57\0\ud11d\0\ud14c\0\ud17b\0\ud1aa\0\57\0\ud1d9"+
    "\0\ube63\0\ud208\0\ud237\0\ud266\0\ud295\0\ud2c4\0\ud2f3\0\ud322"+
    "\0\ud351\0\ud380\0\ud3af\0\ud3de\0\ud40d\0\ud43c\0\ud46b\0\ud49a"+
    "\0\ud4c9\0\ud4f8\0\ud527\0\ud556\0\ud585\0\ud5b4\0\ud5e3\0\ud612"+
    "\0\ud641\0\ud670\0\ud69f\0\ud6ce\0\ud6fd\0\ud72c\0\ud75b\0\ud78a"+
    "\0\ud7b9\0\ud7e8\0\ud817\0\ud846\0\ud875\0\ud8a4\0\ud8d3\0\ud902"+
    "\0\ud931\0\57\0\ud960\0\ud98f\0\ud9be\0\ud9ed\0\uda1c\0\uda4b"+
    "\0\uda7a\0\udaa9\0\udad8\0\udb07\0\udb36\0\udb65\0\udb94\0\udbc3"+
    "\0\udbf2\0\udc21\0\udc50\0\udc7f\0\udcae\0\udcdd\0\udd0c\0\udd3b"+
    "\0\udd6a\0\udd99\0\uddc8\0\uddf7\0\ude26\0\ude55\0\ude84\0\udeb3"+
    "\0\udee2\0\udf11\0\udf40\0\udf6f\0\udf9e\0\udfcd\0\udffc\0\ue02b"+
    "\0\ue05a\0\ue089\0\ue0b8\0\ue0e7\0\ue116\0\ue145\0\ue174\0\ue1a3"+
    "\0\ue1d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\2\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\2\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\35\61\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\60\1\0\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\2\0\1\70\3\0\1\71"+
    "\1\72\30\0\1\73\2\0\1\74\1\75\2\0\1\76"+
    "\1\77\1\0\1\100\10\0\1\101\1\102\32\0\1\103"+
    "\2\0\1\104\1\105\2\0\1\106\1\107\3\0\1\110"+
    "\6\0\1\111\1\112\33\0\1\113\1\114\2\0\1\115"+
    "\2\0\1\116\1\117\1\0\1\120\5\0\1\121\4\0"+
    "\1\122\6\0\1\123\22\0\1\124\1\125\1\0\1\126"+
    "\1\127\2\0\1\130\4\0\1\131\1\132\5\0\1\133"+
    "\1\134\1\135\30\0\1\136\2\0\1\137\1\140\2\0"+
    "\1\141\14\0\1\142\32\0\1\143\2\0\1\144\1\145"+
    "\2\0\1\146\1\147\1\0\1\150\11\0\1\151\32\0"+
    "\1\152\2\0\1\153\1\0\1\154\1\155\2\0\1\156"+
    "\1\157\1\160\3\0\1\161\2\0\1\162\2\0\1\163"+
    "\31\0\1\164\2\0\1\165\1\166\2\0\1\167\14\0"+
    "\1\170\32\0\1\171\2\0\1\172\1\173\2\0\1\174"+
    "\7\0\1\175\4\0\1\176\32\0\1\177\2\0\1\200"+
    "\1\201\2\0\1\202\47\0\1\203\1\204\1\205\1\206"+
    "\1\207\1\210\1\0\1\211\1\0\1\212\1\213\1\0"+
    "\1\214\1\215\1\0\1\216\1\217\2\0\1\220\1\221"+
    "\3\0\1\222\26\0\1\223\2\0\1\224\1\225\2\0"+
    "\1\226\1\227\12\0\1\230\33\0\1\231\3\0\1\232"+
    "\2\0\1\233\1\234\1\0\1\235\11\0\1\236\32\0"+
    "\1\237\2\0\1\240\1\241\2\0\1\242\1\243\1\0"+
    "\1\244\4\0\1\245\4\0\1\246\32\0\1\247\3\0"+
    "\1\250\2\0\1\251\52\0\1\252\1\0\1\253\1\0"+
    "\1\254\47\0\1\255\2\0\1\256\1\257\2\0\1\260"+
    "\1\261\13\0\1\262\32\0\1\263\2\0\1\264\1\265"+
    "\2\0\1\266\14\0\1\267\37\0\1\270\5\0\1\271"+
    "\1\0\1\272\5\0\1\273\33\0\1\274\2\0\1\275"+
    "\1\276\52\0\1\277\2\0\1\300\1\301\2\0\1\302"+
    "\1\303\1\0\1\304\11\0\1\305\36\0\1\306\17\0"+
    "\1\307\56\0\1\310\41\0\1\311\122\0\1\312\4\0"+
    "\1\313\1\314\5\0\1\315\17\0\1\316\30\0\1\317"+
    "\4\0\1\320\57\0\1\321\51\0\1\322\1\323\1\324"+
    "\1\325\4\0\1\326\3\0\1\327\1\0\1\330\35\0"+
    "\1\331\6\0\1\321\1\332\47\0\1\333\1\321\1\0"+
    "\1\334\3\0\1\335\52\0\1\336\17\0\1\337\42\0"+
    "\1\340\1\341\1\342\1\0\1\343\44\0\1\344\10\0"+
    "\1\345\4\0\1\346\12\0\1\347\51\0\1\350\34\0"+
    "\1\351\10\0\1\352\41\0\1\353\3\0\1\354\6\0"+
    "\1\355\10\0\1\337\36\0\1\356\4\0\1\357\7\0"+
    "\1\360\3\0\1\361\35\0\1\362\54\0\1\363\23\0"+
    "\1\364\32\0\1\365\2\0\1\346\2\0\1\274\1\366"+
    "\1\367\1\370\1\0\1\371\6\0\1\372\34\0\1\373"+
    "\5\0\1\374\46\0\1\375\1\0\1\376\2\0\1\377"+
    "\2\0\1\u0100\1\u0101\1\u0102\1\102\1\321\1\373\6\0"+
    "\1\u0103\1\u0104\31\0\1\337\4\0\1\u0105\2\0\1\u0106"+
    "\46\0\1\u0107\3\0\1\u0108\12\0\1\346\37\0\1\u0109"+
    "\2\0\1\u010a\1\u010b\2\0\1\u010c\47\0\1\u010d\2\0"+
    "\1\u010e\1\u010f\2\0\1\u0110\51\0\1\320\65\0\1\271"+
    "\1\u0111\1\u0112\4\0\1\u0113\3\0\1\u0114\37\0\1\u0115"+
    "\1\0\1\346\1\271\1\0\1\u0116\50\0\1\u0117\4\0"+
    "\1\u0118\1\u0119\1\0\1\u011a\4\0\1\u011b\2\0\1\u011c"+
    "\32\0\1\u011c\4\0\1\u011d\4\0\1\u011e\1\146\43\0"+
    "\1\u011f\2\0\1\u0120\1\u0121\12\0\1\346\4\0\1\u0122"+
    "\36\0\1\u0123\2\0\1\u0124\47\0\1\u0125\2\0\1\u0126"+
    "\1\u0127\2\0\1\u0128\1\u0129\56\0\1\u012a\55\0\1\321"+
    "\7\0\1\u012b\37\0\1\u012c\12\0\1\175\17\0\1\u012d"+
    "\1\u012e\1\u012f\22\0\1\u0130\1\u0131\3\0\1\u0132\4\0"+
    "\1\u0133\5\0\1\u0134\3\0\1\u0135\1\u0136\1\0\1\316"+
    "\2\0\1\u0137\27\0\1\u0138\52\0\1\u0139\14\0\1\u013a"+
    "\53\0\1\u013b\53\0\1\u013c\60\0\1\u013d\46\0\1\u013e"+
    "\5\0\1\u013f\72\0\1\u0140\50\0\1\u0141\44\0\1\u0142"+
    "\3\0\1\u0143\2\0\1\u0144\20\0\1\u0145\31\0\1\u0146"+
    "\12\0\1\u0104\11\0\1\u0147\32\0\1\u012a\5\0\1\u0148"+
    "\53\0\1\u0149\14\0\1\u014a\30\0\1\u014b\1\u014c\5\0"+
    "\1\175\55\0\1\u014d\53\0\1\u014e\21\0\1\u014f\4\0"+
    "\1\u0150\25\0\1\u0151\6\0\1\271\46\0\1\u0152\3\0"+
    "\1\u0153\1\u0154\52\0\1\u0155\2\0\1\u0156\2\0\1\u0157"+
    "\2\0\1\161\1\u0158\16\0\1\u0159\23\0\1\u015a\2\0"+
    "\1\u015b\4\0\1\u015c\11\0\1\u015d\2\0\1\u015e\42\0"+
    "\1\u015f\47\0\1\u0160\1\u012a\4\0\1\u0161\1\u0162\1\0"+
    "\1\321\11\0\1\366\41\0\1\367\14\0\1\u0113\33\0"+
    "\1\u0163\2\0\1\u0164\4\0\1\u0165\12\0\1\u0166\33\0"+
    "\1\346\54\0\1\u0167\3\0\1\u0168\2\0\1\u0169\47\0"+
    "\1\u016a\56\0\1\u016b\6\0\1\u016c\50\0\1\u016d\1\u016e"+
    "\5\0\1\u016f\50\0\1\u0170\3\0\1\u0171\51\0\1\u0172"+
    "\1\u0104\1\0\1\u0173\1\0\1\u0174\1\u0175\11\0\1\346"+
    "\5\0\1\u0176\35\0\1\321\65\0\1\u0177\50\0\1\u0178"+
    "\51\0\1\u0179\63\0\1\321\47\0\1\u017a\1\u017b\1\u017c"+
    "\12\0\1\u017d\45\0\1\u017e\2\0\1\u017f\50\0\1\161"+
    "\1\u0180\1\u0138\1\0\1\u0181\13\0\1\u0182\42\0\1\155"+
    "\5\0\1\u0113\5\0\1\u0183\3\0\1\u0184\31\0\1\u0165"+
    "\1\u0185\11\0\1\366\1\321\4\0\1\366\2\0\1\u0186"+
    "\32\0\1\u0187\1\u0188\1\u0189\2\0\1\146\1\u0151\2\0"+
    "\1\u018a\1\u018b\1\146\1\0\1\u018c\10\0\1\u018d\1\0"+
    "\1\u018e\33\0\1\u018f\4\0\1\161\1\u0190\44\0\1\u0191"+
    "\1\u0192\1\u0193\1\0\1\u0194\2\0\1\274\4\0\1\321"+
    "\2\0\1\271\1\366\42\0\1\u0195\4\0\1\u0196\6\0"+
    "\1\u0197\41\0\1\u0138\1\u0198\2\0\1\u0199\13\0\1\u019a"+
    "\1\271\31\0\1\u019b\1\0\1\320\2\0\1\u019c\1\0"+
    "\1\146\50\0\1\u019d\11\0\1\u019e\45\0\1\u019f\2\0"+
    "\1\u01a0\2\0\1\u01a1\2\0\1\u01a2\1\321\3\0\1\161"+
    "\3\0\1\u01a3\4\0\1\u0115\27\0\1\u01a4\2\0\1\161"+
    "\1\u0154\1\321\3\0\1\u01a5\4\0\1\271\4\0\1\271"+
    "\1\161\34\0\1\u01a6\1\u01a7\5\0\1\u01a8\1\u01a9\7\0"+
    "\1\u01aa\1\271\31\0\1\u01ab\1\0\1\320\2\0\1\u01ac"+
    "\1\321\4\0\1\u01ad\5\0\1\320\3\0\1\u01ae\1\102"+
    "\32\0\1\320\1\u01af\1\0\1\u01b0\4\0\1\u01b1\1\0"+
    "\1\320\2\0\1\346\1\0\1\u012b\3\0\1\271\34\0"+
    "\1\u01b2\17\0\1\u01b3\33\0\1\u01b4\2\0\1\u01b5\1\u01b6"+
    "\2\0\1\u01b7\1\u01b8\13\0\1\u01b9\34\0\1\346\2\0"+
    "\1\u01ba\1\u0138\4\0\1\u01bb\5\0\1\161\1\u01bc\6\0"+
    "\1\161\32\0\1\321\3\0\1\u01bd\1\u01be\11\0\1\u01bf"+
    "\1\0\1\u01c0\4\0\1\u01c1\27\0\1\u01c2\52\0\1\u01c3"+
    "\1\u01c4\1\321\2\0\1\u01c5\1\0\1\u01c6\2\0\1\u011e"+
    "\12\0\1\u01c7\31\0\1\u01c8\2\0\1\u01c9\1\u017e\56\0"+
    "\1\u01ca\2\0\1\u01cb\47\0\1\u01cc\2\0\1\u01cd\3\0"+
    "\1\u01ce\14\0\1\u01cf\32\0\1\u01d0\2\0\1\u01d1\1\u01d2"+
    "\2\0\1\u01d3\1\u01d4\57\0\1\u01d5\50\0\1\u0138\53\0"+
    "\1\u01d6\3\0\1\u01d7\2\0\1\u01d8\14\0\1\102\33\0"+
    "\1\u016d\3\0\1\u01d9\1\u01da\1\0\1\u01db\4\0\1\u01dc"+
    "\10\0\1\u01dd\54\0\1\u01de\34\0\1\u011c\1\146\1\0"+
    "\1\146\4\0\1\u01a6\1\u01df\4\0\1\271\40\0\1\u01e0"+
    "\2\0\1\u01e1\4\0\1\u01e2\1\u0190\5\0\1\u0152\4\0"+
    "\1\161\35\0\1\u01e3\2\0\1\u01e4\1\u013f\2\0\1\u01e5"+
    "\3\0\1\u01e6\3\0\1\u01e7\32\0\1\u01e8\1\0\1\u012b"+
    "\1\u01e9\1\0\1\102\4\0\1\u01ea\22\0\1\u01eb\24\0"+
    "\1\u01ec\1\u01ed\52\0\1\u01ee\2\0\1\u01ef\1\u01f0\2\0"+
    "\1\u01f1\50\0\1\u01a6\1\0\1\u01f2\2\0\1\161\1\0"+
    "\1\u01f3\2\0\1\u01f4\1\0\1\u0184\1\0\1\346\51\0"+
    "\1\u01f5\1\u01f6\10\0\1\u01f7\42\0\1\u01f8\46\0\1\u01f9"+
    "\2\0\1\u01fa\1\u01fb\2\0\1\u01fc\47\0\1\u01fd\6\0"+
    "\1\u01fe\14\0\1\u01ff\34\0\1\320\2\0\1\u0200\4\0"+
    "\1\u011e\1\u0190\44\0\1\u0185\1\u0201\2\0\1\u0185\4\0"+
    "\1\367\3\0\1\373\2\0\1\u0202\37\0\1\u0203\3\0"+
    "\1\u012b\1\0\1\u0165\1\0\1\367\44\0\1\u0204\1\0"+
    "\1\u0205\1\u0206\1\u0185\1\161\11\0\1\321\1\0\1\373"+
    "\1\321\1\0\1\u0114\33\0\1\u0207\1\u0208\2\0\1\u0209"+
    "\1\u020a\1\u020b\2\0\1\u020c\1\u020d\3\0\1\u020e\1\0"+
    "\1\321\1\0\1\u020f\2\0\1\u0210\33\0\1\u0211\1\u0212"+
    "\2\0\1\u0213\47\0\1\u0214\3\0\1\u0215\2\0\1\u0216"+
    "\14\0\1\u0152\65\0\1\u0217\25\0\1\u0218\1\u0219\7\0"+
    "\1\u021a\3\0\1\346\63\0\1\u021b\32\0\1\56\1\0"+
    "\1\u0158\10\0\1\u021c\44\0\1\u01a6\10\0\1\u011e\1\u021d"+
    "\47\0\1\u021e\2\0\1\u0216\56\0\1\u021f\5\0\1\102"+
    "\1\0\1\321\44\0\1\u0220\2\0\1\u0221\1\u0222\2\0"+
    "\1\u012a\2\0\1\321\40\0\1\u0223\6\0\1\u0224\2\0"+
    "\1\u0225\5\0\1\320\3\0\1\u0226\32\0\1\u0227\2\0"+
    "\1\56\1\u0164\1\0\1\u021d\2\0\1\u0228\1\0\1\u0229"+
    "\43\0\1\u022a\1\u022b\7\0\1\u022c\1\u022d\11\0\1\u022e"+
    "\1\u022f\30\0\1\u0230\2\0\1\u0231\1\u0232\2\0\1\u0216"+
    "\7\0\1\u012b\4\0\1\u0233\41\0\1\u0234\1\u0235\50\0"+
    "\1\u0236\1\56\1\0\1\u0237\2\0\1\u0238\1\0\1\u0239"+
    "\2\0\1\u023a\3\0\1\320\3\0\1\271\33\0\1\320"+
    "\3\0\1\u023b\1\0\1\271\2\0\1\u023c\5\0\1\u023d"+
    "\37\0\1\u012b\5\0\1\u023e\1\161\1\u023f\1\0\1\u0240"+
    "\1\271\6\0\1\u0241\32\0\1\u0242\7\0\1\u0243\1\0"+
    "\1\u0244\4\0\1\u01e5\15\0\1\u012f\26\0\1\u0245\1\u0152"+
    "\1\0\1\u0246\50\0\1\u0247\1\u0112\6\0\1\u0248\6\0"+
    "\1\u0249\44\0\1\346\62\0\1\u024a\75\0\1\u024b\34\0"+
    "\1\u024c\46\0\1\u024d\11\0\1\u024e\1\u024f\57\0\1\u0250"+
    "\45\0\1\u0251\4\0\1\u0252\1\0\1\u0253\1\u0254\45\0"+
    "\1\u012b\2\0\1\u0255\1\u0256\1\0\1\u0257\1\0\1\u0258"+
    "\1\u0190\6\0\1\346\2\0\1\u0259\1\u025a\40\0\1\u025b"+
    "\1\0\1\u025c\11\0\1\u025d\32\0\1\u025e\1\0\1\u011c"+
    "\4\0\1\u011e\2\0\1\u025f\1\0\1\u0260\45\0\1\u0261"+
    "\1\u0262\2\0\1\u0263\53\0\1\u0264\2\0\1\u0216\7\0"+
    "\1\346\47\0\1\u0265\51\0\1\u012a\12\0\1\321\1\0"+
    "\1\271\47\0\1\u021f\1\0\1\u0266\52\0\1\u0267\57\0"+
    "\1\u0268\45\0\56\312\6\0\1\u0269\2\0\1\u026a\14\0"+
    "\1\u026b\35\0\1\116\57\0\1\u026c\76\0\1\u026d\32\0"+
    "\1\u026e\6\0\1\u026f\1\u0270\57\0\1\u0271\71\0\1\u0272"+
    "\36\0\1\u0273\62\0\1\u0115\62\0\1\u0184\53\0\1\u0274"+
    "\50\0\1\u0275\62\0\1\271\72\0\1\u018b\57\0\1\u0276"+
    "\32\0\1\u0277\2\0\1\u0278\60\0\1\u0279\16\0\1\u027a"+
    "\45\0\1\271\52\0\1\u027b\53\0\1\u027c\56\0\1\u027d"+
    "\52\0\1\u027e\62\0\1\u027f\76\0\1\u0280\44\0\1\u0281"+
    "\1\u0282\1\u0283\11\0\1\u0284\54\0\1\u0285\44\0\1\u0286"+
    "\50\0\1\u0287\2\0\1\u0288\1\u0289\1\0\1\161\51\0"+
    "\1\u028a\63\0\1\u0200\11\0\1\u028b\1\u028c\35\0\1\u028d"+
    "\62\0\1\u028e\51\0\1\u028f\63\0\1\u0290\46\0\1\u0291"+
    "\2\0\1\337\3\0\1\u0292\52\0\1\u0293\62\0\1\u0294"+
    "\52\0\1\u0295\54\0\1\u0190\64\0\1\320\61\0\1\321"+
    "\53\0\1\321\13\0\1\346\36\0\1\u0296\61\0\1\u0297"+
    "\4\0\1\161\62\0\1\321\40\0\1\u0298\70\0\1\u0204"+
    "\45\0\1\116\55\0\1\u0299\1\u029a\10\0\1\u029b\50\0"+
    "\1\321\2\0\1\u029c\55\0\1\u029d\1\0\1\u029e\3\0"+
    "\1\u029f\1\u02a0\44\0\1\56\5\0\1\u029c\6\0\1\u012b"+
    "\42\0\1\u02a1\1\u0190\1\0\1\u023e\1\0\1\u0119\53\0"+
    "\1\u025e\51\0\1\u02a2\56\0\1\u02a3\105\0\1\u0115\40\0"+
    "\1\u021d\1\u02a4\45\0\1\u01cd\7\0\1\u02a5\54\0\1\u02a6"+
    "\47\0\1\u02a7\10\0\1\u02a8\10\0\1\u0165\32\0\1\u02a9"+
    "\24\0\1\u02aa\36\0\1\u02ab\63\0\1\u02ac\50\0\1\337"+
    "\6\0\1\u01e6\44\0\1\u0185\67\0\1\u012b\5\0\1\346"+
    "\40\0\1\271\63\0\1\u02ad\55\0\1\u0297\67\0\1\u012b"+
    "\51\0\1\u024d\64\0\1\320\12\0\1\u02ae\27\0\1\u02af"+
    "\73\0\1\320\35\0\1\u02b0\56\0\1\u02b1\60\0\1\u02b2"+
    "\30\0\1\u02b3\35\0\1\346\51\0\1\u02b4\17\0\1\u02b5"+
    "\31\0\1\u02b6\102\0\1\u02b7\45\0\1\146\76\0\1\u02b8"+
    "\30\0\1\u02b9\4\0\1\u02ba\46\0\1\u02bb\2\0\1\u02bc"+
    "\56\0\1\u01a6\2\0\1\u02bd\2\0\1\u02be\56\0\1\u02bf"+
    "\10\0\1\u0114\35\0\1\u02c0\1\0\1\u0158\2\0\1\u02c1"+
    "\2\0\1\u02bf\3\0\1\u02c2\43\0\1\u02c3\2\0\1\u02c4"+
    "\54\0\1\346\63\0\1\u02c5\62\0\1\u02c6\53\0\1\u02c7"+
    "\56\0\1\u013d\53\0\1\u02c8\1\0\1\u02c9\10\0\1\321"+
    "\37\0\1\u024d\2\0\1\u02ca\51\0\1\u02cb\1\u02cc\3\0"+
    "\1\u02cd\73\0\1\u02ce\35\0\1\u0112\3\0\1\u027a\53\0"+
    "\1\u02cf\52\0\1\u02d0\1\0\1\u02d1\10\0\1\u02d2\12\0"+
    "\1\u02d3\35\0\1\321\57\0\1\u02d4\54\0\1\u02d5\3\0"+
    "\1\u02d6\1\0\1\u024c\44\0\1\u01f7\56\0\1\321\102\0"+
    "\1\u02d7\32\0\1\u0138\65\0\1\u02d8\62\0\1\u01e5\50\0"+
    "\1\u02d9\104\0\1\u02da\42\0\1\u02db\41\0\1\u02dc\13\0"+
    "\1\u02dd\40\0\1\u02de\64\0\1\u02df\1\u02e0\53\0\1\u02e1"+
    "\55\0\1\u02e2\3\0\1\u024c\56\0\1\u02cd\72\0\1\u01e5"+
    "\46\0\1\u02e3\53\0\1\u02e4\72\0\1\u02e5\35\0\1\u02e6"+
    "\3\0\1\u025e\50\0\1\u02e7\64\0\1\u012b\51\0\1\u02b2"+
    "\4\0\1\u02e8\72\0\1\u0204\36\0\1\u0220\3\0\1\321"+
    "\13\0\1\u02e9\7\0\1\u02ea\32\0\1\u02eb\62\0\1\u02ec"+
    "\53\0\1\u02ed\50\0\1\u02ee\101\0\1\u02ef\33\0\1\u02f0"+
    "\30\0\1\u02f1\32\0\1\u02f2\65\0\1\u0184\63\0\1\u0104"+
    "\54\0\1\u02f3\44\0\1\321\6\0\1\u01c9\73\0\1\u02f4"+
    "\32\0\1\u029d\70\0\1\321\44\0\1\u02f5\54\0\1\146"+
    "\5\0\1\u02a5\57\0\1\u02ad\7\0\1\u02f6\32\0\1\u01c0"+
    "\6\0\1\146\4\0\1\320\55\0\1\u02a5\53\0\1\u0293"+
    "\61\0\1\u021d\66\0\1\u0260\42\0\1\u02f7\51\0\1\u02f8"+
    "\2\0\1\346\74\0\1\u02f9\56\0\1\u02fa\37\0\1\u02fb"+
    "\5\0\1\u02fc\70\0\1\u02fd\44\0\1\u02fe\54\0\1\u02ff"+
    "\52\0\1\u024c\64\0\1\u0176\45\0\1\146\23\0\1\u0300"+
    "\31\0\1\u0301\6\0\1\u0302\50\0\1\u0303\7\0\1\u0304"+
    "\54\0\1\u0305\13\0\1\u0306\43\0\1\u0270\52\0\1\337"+
    "\2\0\1\u0307\1\u0290\1\0\1\u0308\64\0\1\271\43\0"+
    "\1\u0309\74\0\1\u030a\41\0\1\320\53\0\1\u030b\62\0"+
    "\1\346\11\0\1\u030c\44\0\1\56\67\0\1\321\43\0"+
    "\1\u01aa\52\0\1\u0190\10\0\1\u030d\1\116\5\0\1\320"+
    "\37\0\1\u0120\1\0\1\u030e\2\0\1\u030f\73\0\1\112"+
    "\32\0\1\u0310\2\0\1\u01e7\1\u0278\2\0\1\u0311\52\0"+
    "\1\u0312\53\0\1\u0313\3\0\1\u02d5\2\0\1\u0314\2\0"+
    "\1\u024c\53\0\1\u025e\7\0\1\337\63\0\1\u0315\40\0"+
    "\1\u029d\73\0\1\346\56\0\1\u0316\42\0\1\u0317\54\0"+
    "\1\u0318\70\0\1\u0260\60\0\1\321\2\0\1\u0319\41\0"+
    "\1\321\10\0\1\321\57\0\1\u0298\37\0\1\u02f8\4\0"+
    "\1\373\56\0\1\u0260\51\0\1\u02f8\56\0\1\321\2\0"+
    "\1\u031a\5\0\1\345\45\0\1\u031b\16\0\1\346\60\0"+
    "\1\u031c\36\0\1\u031d\62\0\1\u0158\55\0\1\u031e\12\0"+
    "\1\321\43\0\1\u0152\52\0\1\u031f\62\0\1\u0190\52\0"+
    "\1\u0320\56\0\1\u0321\74\0\1\346\44\0\1\u012b\52\0"+
    "\1\320\4\0\1\346\70\0\1\u012b\56\0\1\346\3\0"+
    "\1\271\33\0\1\320\16\0\1\346\50\0\1\u0260\52\0"+
    "\1\367\61\0\1\346\6\0\1\320\43\0\1\320\11\0"+
    "\1\320\1\321\37\0\1\u0115\63\0\1\u0322\53\0\1\u0323"+
    "\54\0\1\161\5\0\1\u0324\53\0\1\u0325\4\0\1\u0326"+
    "\56\0\1\u01e6\2\0\1\321\41\0\1\u011e\65\0\1\u0327"+
    "\70\0\1\u024c\36\0\1\u0328\4\0\1\346\11\0\1\346"+
    "\40\0\1\u0184\56\0\1\u0329\63\0\1\u032a\70\0\1\u032b"+
    "\2\0\1\u032c\37\0\1\u0293\2\0\1\u012b\50\0\1\u012b"+
    "\56\0\1\u032d\6\0\1\u032e\61\0\1\321\44\0\1\321"+
    "\60\0\1\u01f7\54\0\1\u032f\10\0\1\u0330\5\0\1\346"+
    "\42\0\1\u029d\3\0\1\346\54\0\1\u0331\61\0\1\u0285"+
    "\56\0\1\271\60\0\1\u0332\51\0\1\u021f\5\0\1\102"+
    "\52\0\1\320\56\0\1\346\54\0\1\u01c0\60\0\1\u029d"+
    "\52\0\1\u02fe\52\0\1\u0115\57\0\1\u0333\15\0\1\u01e6"+
    "\36\0\1\u01a6\4\0\1\u01ac\54\0\1\u0334\70\0\1\u0335"+
    "\51\0\1\u0336\56\0\1\u01c0\3\0\1\u0337\7\0\1\146"+
    "\67\0\1\u012f\27\0\1\u029d\11\0\1\u029d\36\0\1\56"+
    "\5\0\1\u0338\57\0\1\u030d\5\0\1\u0339\56\0\1\u02fc"+
    "\67\0\1\u0104\30\0\1\u033a\101\0\1\u024d\35\0\1\u0184"+
    "\16\0\1\210\47\0\1\u033b\65\0\1\u033c\42\0\1\u029d"+
    "\1\0\1\320\1\u024c\1\0\1\u0165\5\0\1\346\1\321"+
    "\44\0\1\u033d\54\0\1\u0293\53\0\1\u033e\5\0\1\346"+
    "\54\0\1\u033f\62\0\1\u0202\54\0\1\u0340\50\0\1\u0341"+
    "\56\0\1\366\56\0\1\u0342\55\0\1\u0343\1\u0344\7\0"+
    "\1\u019f\55\0\1\u0342\1\0\1\u0345\45\0\1\u0346\2\0"+
    "\1\u0347\2\0\1\u0348\53\0\1\146\2\0\1\321\10\0"+
    "\1\320\35\0\1\u0349\1\0\1\u034a\15\0\1\321\40\0"+
    "\1\321\10\0\1\346\46\0\1\u034b\66\0\1\u0290\50\0"+
    "\1\u0165\62\0\1\u024f\1\0\1\116\7\0\1\u034c\34\0"+
    "\1\u034d\61\0\1\u034e\63\0\1\u034f\3\0\1\u0350\1\u0351"+
    "\2\0\1\u0352\50\0\1\u0353\1\0\1\u0354\10\0\1\u0104"+
    "\31\0\1\271\15\0\1\346\37\0\1\337\71\0\1\u024d"+
    "\46\0\1\u0355\76\0\1\271\35\0\1\u0356\4\0\1\346"+
    "\51\0\1\u0357\20\0\1\u0260\45\0\1\u0358\44\0\1\u0359"+
    "\3\0\1\u035a\66\0\1\u035b\51\0\1\u035c\47\0\1\u035d"+
    "\2\0\1\u012a\20\0\1\u02f7\37\0\1\u035e\54\0\1\u0312"+
    "\1\u035f\55\0\1\u0360\57\0\1\u0361\55\0\1\u0361\57\0"+
    "\1\u0362\57\0\1\u0363\53\0\1\u033e\15\0\1\u01e6\3\0"+
    "\1\u0114\32\0\1\u01a6\63\0\1\u01aa\3\0\1\271\51\0"+
    "\1\u0165\7\0\1\u02ad\56\0\1\320\53\0\1\u0364\100\0"+
    "\1\u0365\35\0\1\u0366\47\0\1\u0367\63\0\1\175\24\0"+
    "\1\u01eb\23\0\1\u0368\67\0\1\346\44\0\1\u01a6\12\0"+
    "\1\u029d\57\0\1\346\42\0\1\271\75\0\1\u012b\36\0"+
    "\1\u0369\60\0\1\u036a\56\0\1\u0115\4\0\1\u036b\50\0"+
    "\1\u036c\1\u036d\3\0\1\u036e\3\0\1\u036f\47\0\1\u0370"+
    "\55\0\1\u0371\66\0\1\u0372\51\0\1\u0373\54\0\1\u0370"+
    "\3\0\1\u030f\2\0\1\u0354\44\0\1\u011c\61\0\1\u0374"+
    "\55\0\1\u0375\1\u0280\11\0\1\u0376\45\0\1\u0377\2\0"+
    "\1\u0378\56\0\1\u01e7\54\0\1\u0379\1\346\5\0\1\u02ad"+
    "\47\0\1\u01a6\17\0\1\u0164\46\0\1\346\7\0\1\366"+
    "\36\0\1\u037a\104\0\1\u02f1\26\0\1\u037b\61\0\1\346"+
    "\12\0\1\u037c\56\0\1\u037d\63\0\1\u02db\45\0\1\u037e"+
    "\64\0\1\u012b\35\0\1\u037f\67\0\1\161\52\0\1\321"+
    "\11\0\1\346\44\0\1\u0380\23\0\1\u02ae\33\0\1\321"+
    "\2\0\1\161\45\0\1\321\5\0\1\u0204\1\0\1\u0381"+
    "\6\0\1\321\44\0\1\u0373\64\0\1\346\3\0\1\320"+
    "\37\0\1\346\3\0\1\u0382\52\0\1\320\5\0\1\u024c"+
    "\51\0\1\u0116\56\0\1\u0383\62\0\1\u0384\51\0\1\u0385"+
    "\4\0\1\u01c0\72\0\1\u0386\52\0\1\346\51\0\1\u0387"+
    "\47\0\1\146\62\0\1\u0388\57\0\1\122\1\0\1\346"+
    "\77\0\1\u0389\35\0\1\u016e\45\0\1\u038a\1\u0202\57\0"+
    "\1\u0355\15\0\1\346\60\0\1\146\46\0\1\u038b\45\0"+
    "\1\u038c\7\0\1\346\53\0\1\u038d\51\0\1\u038e\3\0"+
    "\1\u038f\62\0\1\u0390\6\0\1\346\42\0\1\u0119\1\u0391"+
    "\1\0\1\u0392\56\0\1\346\50\0\1\320\7\0\1\320"+
    "\53\0\1\u0393\60\0\1\u024d\17\0\1\u01e6\32\0\1\u0394"+
    "\1\0\1\u0395\3\0\1\u023b\43\0\1\146\13\0\1\u02f7"+
    "\45\0\1\u02ef\55\0\1\u0396\67\0\1\u032c\47\0\1\u038d"+
    "\62\0\1\u0397\53\0\1\146\4\0\1\u0398\2\0\1\146"+
    "\3\0\1\271\50\0\1\u0399\56\0\1\u01ff\46\0\1\u0280"+
    "\54\0\1\u01a6\62\0\1\u0293\3\0\1\u039a\45\0\1\u039b"+
    "\56\0\1\367\64\0\1\u039c\67\0\1\346\4\0\1\u0291"+
    "\36\0\1\u039d\57\0\1\u039e\56\0\1\u039f\56\0\1\u0369"+
    "\76\0\1\271\37\0\1\u024d\55\0\1\146\51\0\1\u03a0"+
    "\71\0\1\u03a1\57\0\1\346\61\0\1\u03a2\44\0\1\u0200"+
    "\61\0\1\271\52\0\1\u03a3\56\0\1\u03a4\61\0\1\u03a5"+
    "\47\0\1\u03a6\70\0\1\u012b\50\0\1\u03a7\55\0\1\u027a"+
    "\53\0\1\u025e\62\0\1\u03a8\73\0\1\u03a9\37\0\1\u024d"+
    "\63\0\1\u024d\57\0\1\u02a6\1\0\1\u0278\51\0\1\346"+
    "\1\0\1\346\51\0\1\346\5\0\1\271\55\0\1\u016c"+
    "\54\0\1\u0220\61\0\1\u034d\67\0\1\346\45\0\1\u03aa"+
    "\56\0\1\u01cd\50\0\1\u0271\77\0\1\102\45\0\1\161"+
    "\53\0\1\u01b7\47\0\1\u0310\2\0\1\u03ab\56\0\1\u03ac"+
    "\1\u03ad\61\0\1\u039b\47\0\1\u01e7\2\0\1\146\53\0"+
    "\1\u03ae\3\0\1\337\5\0\1\u03af\47\0\1\u03b0\55\0"+
    "\1\u03b1\63\0\1\56\14\0\1\u03b2\32\0\1\u03b3\63\0"+
    "\1\346\13\0\1\321\50\0\1\321\61\0\1\346\63\0"+
    "\1\u03b4\42\0\1\u03b5\54\0\1\346\2\0\1\346\55\0"+
    "\1\u03b6\50\0\1\161\4\0\1\161\71\0\1\u03b7\42\0"+
    "\1\u029d\62\0\1\u032e\55\0\1\u03b8\56\0\1\u03b9\65\0"+
    "\1\u0158\62\0\1\u03ba\35\0\1\u03bb\67\0\1\u03bc\52\0"+
    "\1\u011e\54\0\1\u03bd\67\0\1\u01c9\63\0\1\u03be\35\0"+
    "\1\u03bf\101\0\1\u0259\1\u03c0\63\0\1\u03c1\25\0\1\u03c2"+
    "\16\0\1\u03ba\70\0\1\u03c3\32\0\1\u03c4\57\0\1\175"+
    "\55\0\1\u03c5\104\0\1\u01eb\35\0\1\u02ad\7\0\1\u03c6"+
    "\41\0\1\u038d\4\0\1\320\45\0\1\u03c7\62\0\1\u03c8"+
    "\102\0\1\u03c9\32\0\1\u01fe\73\0\1\u0370\37\0\1\u0293"+
    "\2\0\1\u03ca\55\0\1\u03cb\70\0\1\u03cc\36\0\1\u0204"+
    "\70\0\1\u03cd\53\0\1\u03ce\67\0\1\u03cf\60\0\1\u03d0"+
    "\50\0\1\u03d1\51\0\1\u03d2\56\0\1\146\52\0\1\u0278"+
    "\2\0\1\u016c\64\0\1\u024c\51\0\1\u03d3\101\0\1\u03d4"+
    "\25\0\1\u03d5\6\0\1\u03d6\11\0\1\u03d7\37\0\1\u03d8"+
    "\16\0\1\u03d9\42\0\1\u03da\54\0\1\u03db\55\0\1\u03dc"+
    "\64\0\1\u03dd\57\0\1\u03de\51\0\1\u03df\53\0\1\u03e0"+
    "\106\0\1\u03e1\25\0\1\u03e2\55\0\1\161\61\0\1\u03e3"+
    "\54\0\1\u03e4\57\0\1\u03e5\57\0\1\u03e6\54\0\1\u03e7"+
    "\60\0\1\u03e8\75\0\1\u03e9\37\0\1\u03ea\105\0\1\u03eb"+
    "\25\0\1\u03ec\64\0\1\u03ed\55\0\1\u0138\55\0\1\u03ee"+
    "\60\0\1\u03ef\63\0\1\321\64\0\1\321\42\0\1\u03f0"+
    "\51\0\1\u03f1\100\0\1\u03f2\36\0\1\337\60\0\1\u016d"+
    "\53\0\1\u03f3\61\0\1\373\57\0\1\u03f4\65\0\1\u03f5"+
    "\47\0\1\u01cd\51\0\1\122\71\0\1\u0298\56\0\1\u03f6"+
    "\41\0\1\u0277\57\0\1\146\6\0\1\u03f7\46\0\1\u0310"+
    "\3\0\1\u0370\105\0\1\u03f8\32\0\1\u03f9\53\0\1\321"+
    "\64\0\1\u03fa\54\0\1\u0165\51\0\1\u0278\56\0\1\u012a"+
    "\64\0\1\u03fb\54\0\1\u0278\52\0\1\u025e\53\0\1\146"+
    "\61\0\1\u0280\3\0\1\u0122\52\0\1\u03fc\63\0\1\u03fd"+
    "\50\0\1\u03af\56\0\1\161\57\0\1\u03a9\57\0\1\u01ad"+
    "\53\0\1\321\101\0\1\u0387\65\0\1\u03fe\35\0\1\u0199"+
    "\53\0\1\u012a\54\0\1\u02e6\55\0\1\367\54\0\1\346"+
    "\22\0\1\u0358\51\0\1\u0115\50\0\1\u0158\53\0\1\u03ff"+
    "\56\0\1\u0400\52\0\1\u0401\3\0\1\u0300\7\0\1\u038d"+
    "\3\0\1\u03ba\35\0\1\u0402\57\0\1\u0184\55\0\1\u0151"+
    "\77\0\1\u0403\57\0\1\u0404\35\0\1\u0405\60\0\1\u01bc"+
    "\2\0\1\u0406\60\0\1\u0407\56\0\1\u0408\51\0\1\155"+
    "\51\0\1\u0409\73\0\1\u040a\46\0\1\u029d\1\0\1\u0119"+
    "\56\0\1\u0122\57\0\1\u034f\56\0\1\161\55\0\1\u040b"+
    "\72\0\1\u0184\56\0\1\u040c\42\0\1\u013d\51\0\1\u030c"+
    "\4\0\1\346\72\0\1\u0342\37\0\1\u040d\16\0\1\u040e"+
    "\42\0\1\u0342\72\0\1\u040f\42\0\1\u0410\55\0\1\u0411"+
    "\52\0\1\u0152\54\0\1\u0412\60\0\1\u034f\64\0\1\u0234"+
    "\51\0\1\337\57\0\1\337\2\0\1\u0413\47\0\1\u0414"+
    "\11\0\1\u0415\70\0\1\u0416\35\0\1\u0417\3\0\1\u027a"+
    "\47\0\1\u0280\71\0\1\u0190\52\0\1\u0418\53\0\1\u0419"+
    "\55\0\1\u041a\64\0\1\366\12\0\1\u041b\43\0\1\u0164"+
    "\54\0\1\u041c\47\0\1\u041d\63\0\1\320\104\0\1\u041e"+
    "\30\0\1\u0363\6\0\1\u024d\63\0\1\u028c\42\0\1\u03b9"+
    "\61\0\1\u019f\54\0\1\346\54\0\1\u041f\52\0\1\u0420"+
    "\60\0\1\320\16\0\1\u0421\42\0\1\u0422\60\0\1\u0423"+
    "\55\0\1\271\53\0\1\u0424\54\0\1\u032c\61\0\1\u0425"+
    "\52\0\1\u0322\23\0\1\u0426\56\0\1\u0427\35\0\1\u017e"+
    "\74\0\1\271\41\0\1\56\52\0\1\56\57\0\1\u0265"+
    "\23\0\1\u0104\41\0\1\u0176\51\0\1\u0428\55\0\1\271"+
    "\21\0\1\u025e\44\0\1\u0429\64\0\1\320\56\0\1\u029d"+
    "\43\0\1\u0279\63\0\1\u0144\53\0\1\u012a\7\0\1\u012b"+
    "\43\0\1\u03b2\77\0\1\u042a\33\0\1\u038c\74\0\1\u028c"+
    "\46\0\1\u042b\46\0\1\u042c\102\0\1\u014b\32\0\1\u042d"+
    "\70\0\1\u042e\72\0\1\u042f\33\0\1\u0430\55\0\1\u03ba"+
    "\77\0\1\u0115\36\0\1\u0401\53\0\1\u0431\2\0\1\u0432"+
    "\1\u0433\2\0\1\146\51\0\1\u0434\20\0\1\102\35\0"+
    "\1\u0435\61\0\1\u0436\52\0\1\u023b\106\0\1\u0437\30\0"+
    "\1\u0438\74\0\1\u0439\44\0\1\u043a\51\0\1\u043b\4\0"+
    "\1\346\64\0\1\146\42\0\1\146\100\0\1\u02db\43\0"+
    "\1\u043c\61\0\1\u028b\64\0\1\u0373\56\0\1\u02b1\37\0"+
    "\1\u02db\67\0\1\u0158\50\0\1\u043d\55\0\1\u043e\64\0"+
    "\1\u043f\54\0\1\u0440\54\0\1\u03db\50\0\1\u011c\24\0"+
    "\1\271\35\0\1\u012a\66\0\1\u0441\47\0\1\u03df\64\0"+
    "\1\146\5\0\1\u0104\42\0\1\u0442\56\0\1\373\2\0"+
    "\1\271\46\0\1\u0310\63\0\1\271\61\0\1\373\51\0"+
    "\1\u0443\62\0\1\u02a5\57\0\1\u012b\47\0\1\u0444\65\0"+
    "\1\u0445\67\0\1\u024d\60\0\1\u0446\45\0\1\u0447\52\0"+
    "\1\u0448\74\0\1\u0449\35\0\1\u0401\13\0\1\u038d\41\0"+
    "\1\u02b2\57\0\1\u044a\56\0\1\u0401\3\0\1\u0300\7\0"+
    "\1\u038d\42\0\1\u044b\101\0\1\u044c\36\0\1\u01e0\50\0"+
    "\1\u044d\57\0\1\u044e\66\0\1\u044f\54\0\1\375\47\0"+
    "\1\u0450\65\0\1\u0451\51\0\1\u03b2\65\0\1\u0452\66\0"+
    "\1\u0453\40\0\1\u0454\56\0\1\u0455\57\0\1\u0456\65\0"+
    "\1\u0260\1\u0457\70\0\1\u0458\53\0\1\u0459\36\0\1\u045a"+
    "\77\0\1\u045b\47\0\1\u045c\50\0\1\u045d\72\0\1\u045e"+
    "\36\0\1\u045f\57\0\1\u0460\65\0\1\u0461\46\0\1\u0462"+
    "\77\0\1\271\53\0\1\u0463\37\0\1\u0464\67\0\1\u0465"+
    "\67\0\1\u0466\35\0\1\u0401\3\0\1\u0300\7\0\1\u0467"+
    "\44\0\1\u0468\56\0\1\u0469\74\0\1\u046a\37\0\1\u046b"+
    "\61\0\1\u046c\73\0\1\u046d\46\0\1\u046e\46\0\1\u024d"+
    "\56\0\1\u046f\57\0\1\u0470\61\0\1\u0260\56\0\1\u0222"+
    "\61\0\1\u023b\50\0\1\u0471\54\0\1\u0472\55\0\1\u02ed"+
    "\57\0\1\u01b2\56\0\1\u0473\7\0\1\u0474\53\0\1\u0475"+
    "\65\0\1\122\55\0\1\u0104\45\0\1\161\54\0\1\u0271"+
    "\60\0\1\u0476\53\0\1\u0477\107\0\1\u0478\32\0\1\u03c0"+
    "\72\0\1\u02e9\33\0\1\u0479\57\0\1\u039c\73\0\1\u047a"+
    "\40\0\1\u047b\75\0\1\u0202\46\0\1\u047c\51\0\1\u047d"+
    "\64\0\1\65\72\0\1\u028b\35\0\1\u047e\62\0\1\u047f"+
    "\74\0\1\u0480\41\0\1\u0481\63\0\1\u0482\51\0\1\u0483"+
    "\64\0\1\u0484\47\0\1\u0419\50\0\1\u0485\76\0\1\u0486"+
    "\42\0\1\u029d\2\0\1\u012b\57\0\1\321\52\0\1\u01a7"+
    "\64\0\1\u0487\52\0\1\u047e\51\0\1\u01e0\54\0\1\u0488"+
    "\66\0\1\u0489\60\0\1\u048a\53\0\1\u016a\57\0\1\u048b"+
    "\52\0\1\u048c\77\0\1\u0104\41\0\1\u02a6\61\0\1\u048d"+
    "\45\0\1\u028c\10\0\1\271\47\0\1\u021f\61\0\1\u048e"+
    "\62\0\1\u048f\46\0\1\u0490\61\0\1\161\51\0\1\u0491"+
    "\65\0\1\u0492\53\0\1\u0493\76\0\1\366\56\0\1\u0113"+
    "\33\0\1\u0494\77\0\1\u029d\42\0\1\u0300\7\0\1\u038d"+
    "\3\0\1\u03ba\54\0\1\u0495\40\0\1\u041a\3\0\1\346"+
    "\75\0\1\u024c\33\0\1\u0496\63\0\1\u0447\52\0\1\u01cd"+
    "\61\0\1\u0497\55\0\1\u0498\55\0\1\247\63\0\1\u0499"+
    "\77\0\1\u049a\23\0\1\u049b\56\0\1\u049c\63\0\1\u030d"+
    "\74\0\1\u049d\37\0\1\u049e\56\0\1\u049f\52\0\1\u0112"+
    "\102\0\1\u04a0\37\0\1\u04a1\53\0\1\u04a2\10\0\1\u04a3"+
    "\56\0\1\u0475\47\0\1\u04a4\57\0\1\u012b\51\0\1\u04a5"+
    "\62\0\1\u04a6\73\0\1\u04a7\70\0\1\u04a8\23\0\1\u032c"+
    "\61\0\1\u04a9\66\0\1\u04aa\45\0\1\u04ab\61\0\1\u04ac"+
    "\54\0\1\u03dd\63\0\1\u04ad\52\0\1\u04ae\64\0\1\u04af"+
    "\51\0\1\u04b0\104\0\1\u04b1\23\0\1\u04b2\107\0\1\271"+
    "\46\0\1\247\44\0\1\u0157\51\0\1\u028c\63\0\1\u04b3"+
    "\72\0\1\u04b4\36\0\1\u04b5\63\0\1\u04b6\100\0\1\u04b7"+
    "\32\0\1\u02db\62\0\1\u04b8\53\0\1\u04b9\54\0\1\u04ba"+
    "\61\0\1\u0157\61\0\1\u012b\52\0\1\u04bb\51\0\1\u04bc"+
    "\65\0\1\u0486\57\0\1\u0200\72\0\1\u04bd\34\0\1\u04be"+
    "\55\0\1\u04bf\66\0\1\u04c0\46\0\1\u04c1\55\0\1\u04c2"+
    "\66\0\1\u0152\56\0\1\u0260\57\0\1\u046d\66\0\1\u04c3"+
    "\40\0\1\u024d\61\0\1\u04c4\55\0\1\u04c5\47\0\1\u04c6"+
    "\71\0\1\u04c7\45\0\1\373\66\0\1\u04c8\46\0\1\321"+
    "\4\0\1\346\56\0\1\u049c\56\0\1\u04c9\65\0\1\u04ca"+
    "\47\0\1\u04cb\62\0\1\u04cc\64\0\1\u011b\42\0\1\u04cd"+
    "\53\0\1\u0358\64\0\1\u04be\50\0\1\u04ce\64\0\1\u04cf"+
    "\62\0\1\u0372\46\0\1\u04d0\52\0\1\u048d\60\0\1\u030c"+
    "\66\0\1\u0115\51\0\1\u04d1\104\0\1\u012d\56\0\1\u04d2"+
    "\23\0\1\u01ff\66\0\1\u04d3\53\0\1\u0204\75\0\1\u04d4"+
    "\46\0\1\u0158\66\0\1\u04d5\44\0\1\u04d6\65\0\1\u04d7"+
    "\70\0\1\u04d8\33\0\1\u04d9\72\0\1\u04da\42\0\1\u04db"+
    "\52\0\1\u04dc\54\0\1\u04dd\107\0\1\u04de\32\0\1\u045c"+
    "\51\0\1\u045c\60\0\1\u04df\76\0\1\u04e0\44\0\1\u04e1"+
    "\65\0\1\u04e2\36\0\1\u04e3\67\0\1\u04e4\53\0\1\u04e5"+
    "\70\0\1\u0348\50\0\1\u04e6\45\0\1\u04e7\1\0\1\u04e8"+
    "\6\0\1\u04e9\12\0\1\u04ea\47\0\1\330\51\0\1\u04eb"+
    "\53\0\1\u04ec\56\0\1\u04ed\55\0\1\u04ee\52\0\1\u04ef"+
    "\63\0\1\u04f0\102\0\1\u04f1\33\0\1\u04f2\63\0\1\u02f8"+
    "\60\0\1\u04c7\51\0\1\u0164\77\0\1\u04f3\27\0\1\330"+
    "\52\0\1\u03b2\56\0\1\u01e7\3\0\1\u04f4\65\0\1\u0373"+
    "\54\0\1\u024d\53\0\1\u0234\50\0\1\u04f5\77\0\1\u03a2"+
    "\45\0\1\u04f6\61\0\1\u04f7\43\0\1\u03b6\66\0\1\u04f8"+
    "\50\0\1\u04f9\63\0\1\u04a2\62\0\1\u04fa\52\0\1\u0475"+
    "\75\0\1\u024d\33\0\1\u04fb\67\0\1\u04fc\47\0\1\u04fd"+
    "\64\0\1\u04fe\46\0\1\u04ff\63\0\1\u0500\52\0\1\u0501"+
    "\100\0\1\u045c\40\0\1\u0348\55\0\1\122\63\0\1\u0268"+
    "\6\0\1\u0502\40\0\1\u0259\60\0\1\u0503\52\0\1\u0504"+
    "\1\u0505\61\0\1\u0506\57\0\1\330\66\0\1\u0158\61\0"+
    "\1\u0507\57\0\1\u0417\34\0\1\u0508\60\0\1\u046c\54\0"+
    "\1\u0509\60\0\1\u0119\65\0\1\u04f2\44\0\1\u02f8\55\0"+
    "\1\u050a\65\0\1\u050b\53\0\1\u050c\61\0\1\u04c1\53\0"+
    "\1\u050d\52\0\1\u050e\60\0\1\u0373\54\0\1\u050f\62\0"+
    "\1\u03f4\61\0\1\u0510\54\0\1\u0511\54\0\1\u0512\54\0"+
    "\1\u0513\65\0\1\u0257\72\0\1\u0514\45\0\1\u0515\45\0"+
    "\1\u0158\57\0\1\u0516\76\0\1\u0517\40\0\1\u050b\72\0"+
    "\1\u038d\70\0\1\u0518\30\0\1\u0234\70\0\1\u04a2\44\0"+
    "\1\u0510\72\0\1\u0471\37\0\1\u0519\64\0\1\u051a\52\0"+
    "\1\u051b\62\0\1\u03c0\61\0\1\u04be\44\0\1\u012b\55\0"+
    "\1\u051c\71\0\1\u051d\53\0\1\u051e\67\0\1\u03ba\42\0"+
    "\1\u051a\56\0\1\u04bd\51\0\1\u051f\56\0\1\u0520\75\0"+
    "\1\u0475\47\0\1\u0521\65\0\1\u04be\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[57857];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\17\11\1\1\1\0\1\1\1\0"+
    "\1\1\4\0\1\1\20\0\1\1\6\0\2\1\4\0"+
    "\1\11\4\0\2\1\4\0\1\1\2\0\1\1\4\0"+
    "\1\1\27\0\1\11\11\0\1\1\16\0\1\1\13\0"+
    "\1\1\2\0\1\1\1\0\1\11\7\0\1\1\6\0"+
    "\1\1\3\0\1\1\17\0\1\1\1\0\1\1\3\0"+
    "\2\11\5\0\1\1\1\11\11\0\1\1\3\0\1\11"+
    "\11\0\1\1\4\0\1\1\47\0\1\1\5\0\1\1"+
    "\4\0\1\1\2\0\1\11\6\0\1\11\12\0\1\11"+
    "\5\0\1\1\21\0\1\1\1\0\2\11\12\0\1\1"+
    "\12\0\2\1\21\0\1\1\15\0\1\1\4\0\1\1"+
    "\24\0\1\1\22\0\1\1\6\0\1\1\2\0\1\1"+
    "\21\0\2\1\5\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\12\0\1\1\7\0\1\1\11\0\1\11"+
    "\1\1\6\0\1\1\15\0\1\1\2\0\1\1\32\0"+
    "\1\1\5\0\2\1\2\0\1\1\2\0\1\1\11\0"+
    "\1\11\4\0\1\1\10\0\1\1\4\0\1\11\74\0"+
    "\1\11\2\0\1\1\1\0\1\1\12\0\1\1\15\0"+
    "\2\1\1\0\1\1\3\0\1\1\30\0\1\11\10\0"+
    "\1\1\3\0\1\1\4\0\1\1\2\0\1\1\51\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\5\0\2\1\3\0\1\1\2\0\1\1\4\0"+
    "\1\1\3\0\1\11\1\0\1\1\4\0\1\11\4\0"+
    "\1\1\2\0\1\1\23\0\1\1\24\0\1\11\10\0"+
    "\1\1\5\0\1\1\12\0\1\11\4\0\1\1\27\0"+
    "\1\1\6\0\1\1\3\0\1\1\4\0\1\11\11\0"+
    "\1\11\1\1\15\0\1\1\31\0\1\1\3\0\1\1"+
    "\16\0\1\1\11\0\1\1\1\0\1\1\24\0\1\1"+
    "\11\0\1\1\45\0\1\1\25\0\1\1\10\0\2\1"+
    "\3\0\1\11\36\0\1\1\4\0\1\1\10\0\1\11"+
    "\1\1\3\0\1\1\13\0\1\1\11\0\2\11\2\0"+
    "\2\11\4\0\1\11\1\0\1\1\50\0\1\11\57\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;
public String error;
TablaErrores te=new TablaErrores();



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { /* ignore */
          }
        case 54: break;
        case 49: 
          { return new Symbol(sym.conjun_subor_consesiva, yychar,yyline,yytext());
          }
        case 55: break;
        case 21: 
          { return new Symbol(sym.advio_afirmacion, yychar,yyline,new String(yytext()));
          }
        case 56: break;
        case 22: 
          { return new Symbol(sym.conjun_coor_distributiva, yychar,yyline,new String(yytext()));
          }
        case 57: break;
        case 16: 
          { return new Symbol(sym.corcheteabierto, yychar,yyline,yytext());
          }
        case 58: break;
        case 41: 
          { return new Symbol(sym.advio_modo, yychar,yyline,new String(yytext()));
          }
        case 59: break;
        case 15: 
          { return new Symbol(sym.parentesiscerrado, yychar,yyline,yytext());
          }
        case 60: break;
        case 2: 
          { return new Symbol(sym.art_indefinido, yychar,yyline,new String(yytext()));
          }
        case 61: break;
        case 7: 
          { return new Symbol(sym.coma, yychar,yyline,yytext());
          }
        case 62: break;
        case 9: 
          { return new Symbol(sym.dospuntos, yychar,yyline,yytext());
          }
        case 63: break;
        case 34: 
          { return new Symbol(sym.ver_ing, yychar,yyline,new String(yytext()));
          }
        case 64: break;
        case 24: 
          { return new Symbol(sym.verbo_regular, yychar,yyline,new String(yytext()));
          }
        case 65: break;
        case 42: 
          { return new Symbol(sym.advio_lugar, yychar,yyline,new String(yytext()));
          }
        case 66: break;
        case 14: 
          { return new Symbol(sym.parentesisabierto, yychar,yyline,yytext());
          }
        case 67: break;
        case 30: 
          { return new Symbol(sym.conjun_coor_copulativa, yychar,yyline,new String(yytext()));
          }
        case 68: break;
        case 40: 
          { return new Symbol(sym.pro_interrogativo, yychar,yyline,new String(yytext()));
          }
        case 69: break;
        case 45: 
          { return new Symbol(sym.adj_numeral_ordinal, yychar,yyline,new String(yytext()));
          }
        case 70: break;
        case 1: 
          { te.addTable("Error Lexico", yytext()+ " fila "+(yyline+1));
//JOptionPane.showMessageDialog(null, yytext()+ " fila "+(yyline+1), "Error Lexico", JOptionPane.ERROR_MESSAGE);
//System.out.println("Error lexico: "+yytext()+ " fila "+(yyline+1));
          }
        case 71: break;
        case 39: 
          { return new Symbol(sym.interjeccion, yychar,yyline,yytext());
          }
        case 72: break;
        case 38: 
          { return new Symbol(sym.ver_irregular_pasadoparticipio, yychar,yyline,new String(yytext()));
          }
        case 73: break;
        case 51: 
          { return new Symbol(sym.conjun_subor_final, yychar,yyline,yytext());
          }
        case 74: break;
        case 6: 
          { return new Symbol(sym.punto, yychar,yyline,yytext());
          }
        case 75: break;
        case 23: 
          { return new Symbol(sym.advio_negacion, yychar,yyline,new String(yytext()));
          }
        case 76: break;
        case 32: 
          { return new Symbol(sym.art_definido, yychar,yyline,new String(yytext()));
          }
        case 77: break;
        case 27: 
          { return new Symbol(sym.ver_irregular_pasadosimple, yychar,yyline,new String(yytext()));
          }
        case 78: break;
        case 11: 
          { return new Symbol(sym.interrogacioncerrado, yychar,yyline,yytext());
          }
        case 79: break;
        case 26: 
          { return new Symbol(sym.advio_cantidad, yychar,yyline,new String(yytext()));
          }
        case 80: break;
        case 4: 
          { return new Symbol(sym.guion, yychar,yyline,yytext());
          }
        case 81: break;
        case 37: 
          { return new Symbol(sym.advio_tiempo, yychar,yyline,new String(yytext()));
          }
        case 82: break;
        case 52: 
          { return new Symbol(sym.advio_duda, yychar,yyline,new String(yytext()));
          }
        case 83: break;
        case 47: 
          { return new Symbol(sym.conjun_subor_consecutiva, yychar,yyline,yytext());
          }
        case 84: break;
        case 13: 
          { return new Symbol(sym.admiracioncerrado, yychar,yyline,yytext());
          }
        case 85: break;
        case 18: 
          { return new Symbol(sym.asterisco, yychar,yyline,yytext());
          }
        case 86: break;
        case 33: 
          { return new Symbol(sym.adj_calificativo, yychar,yyline,new String(yytext()));
          }
        case 87: break;
        case 46: 
          { return new Symbol(sym.conjun_coor_explicativa, yychar,yyline,new String(yytext()));
          }
        case 88: break;
        case 3: 
          { return new Symbol(sym.pro_personal, yychar,yyline,new String(yytext()));
          }
        case 89: break;
        case 20: 
          { return new Symbol(sym.preposicion, yychar,yyline,new String(yytext()));
          }
        case 90: break;
        case 44: 
          { return new Symbol(sym.aux_futuro, yychar,yyline,new String(yytext()));
          }
        case 91: break;
        case 10: 
          { return new Symbol(sym.interrogacionabierto, yychar,yyline,yytext());
          }
        case 92: break;
        case 29: 
          { return new Symbol(sym.adj_indefinido, yychar,yyline,new String(yytext()));
          }
        case 93: break;
        case 12: 
          { return new Symbol(sym.admiracionabierto, yychar,yyline,yytext());
          }
        case 94: break;
        case 35: 
          { return new Symbol(sym.contraccion, yychar,yyline,yytext());
          }
        case 95: break;
        case 31: 
          { return new Symbol(sym.adj_numeral_cardinal, yychar,yyline,new String(yytext()));
          }
        case 96: break;
        case 53: 
          { return new Symbol(sym.conjun_subor_condicional, yychar,yyline,yytext());
          }
        case 97: break;
        case 43: 
          { return new Symbol(sym.adj_demostrativo, yychar,yyline,new String(yytext()));
          }
        case 98: break;
        case 25: 
          { return new Symbol(sym.adj_posesivo, yychar,yyline,new String(yytext()));
          }
        case 99: break;
        case 48: 
          { return new Symbol(sym.conjun_coor_adversativa, yychar,yyline,new String(yytext()));
          }
        case 100: break;
        case 36: 
          { return new Symbol(sym.conjun_coor_disyuntiva, yychar,yyline,new String(yytext()));
          }
        case 101: break;
        case 17: 
          { return new Symbol(sym.corchetecerrado, yychar,yyline,yytext());
          }
        case 102: break;
        case 50: 
          { return new Symbol(sym.conjun_subor_causal, yychar,yyline,yytext());
          }
        case 103: break;
        case 8: 
          { return new Symbol(sym.puntocoma, yychar,yyline,yytext());
          }
        case 104: break;
        case 28: 
          { return new Symbol(sym.sustantivo, yychar,yyline,new String(yytext()));
          }
        case 105: break;
        case 19: 
          { return new Symbol(sym.diagonal, yychar,yyline,yytext());
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
